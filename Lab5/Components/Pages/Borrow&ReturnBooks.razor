@page "/borrowreturn"
@using Lab5.Models
@using Lab5.Services
@inject ILibraryService LibraryService

<h3>Borrow Books</h3>

<!-- Form for borrowing books -->
<EditForm Model="@borrowModel" OnValidSubmit="@HandleBorrowSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>User:</label>
        <select @bind="borrowModel.UserId" class="form-control">
            <option value="">Select a User</option>
            @foreach (var user in users)
            {
                <option value="@user.Id">@user.Name</option>
            }
        </select>
    </div>

    <div>
        <label>Book:</label>
        <select @bind="borrowModel.BookId" class="form-control">
            <option value="">Select a Book</option>
            @foreach (var book in books)
            {
                <option value="@book.Id">@book.Title</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Borrow Book</button>
</EditForm>

<h3>Return Books</h3>

<!-- List of borrowed books by user, with option to return each book -->
<div>
    @foreach (var user in users)
    {
        <h4>@user.Name's Borrowed Books</h4>
        <ul>
            @if (borrowedBooks.ContainsKey(user.Id) && borrowedBooks[user.Id].Any())
            {
                @foreach (var book in borrowedBooks[user.Id])
                {
                    <li>
                        @book.Title
                        <button @onclick="() => HandleReturnBook(user.Id, book.Id)" class="btn btn-secondary btn-sm">Return</button>
                    </li>
                }
            }
            else
            {
                <li>No borrowed books</li>
            }
        </ul>
    }
</div>

@code {
    private List<Book> books = new();
    private List<User> users = new();
    private Dictionary<int, List<Book>> borrowedBooks = new();

    // Model to hold the borrow form data
    private BorrowModel borrowModel = new();

    protected override void OnInitialized()
    {
        // Load books and users
        books = LibraryService.ReadBooks();
        users = LibraryService.ReadUsers();
    }

    private void HandleBorrowSubmit()
    {
        var selectedBook = books.FirstOrDefault(b => b.Id == borrowModel.BookId);
        var userId = borrowModel.UserId;

        if (selectedBook != null)   //&& books.Count(b => b.Id == userId) > 0
        {
            if (!borrowedBooks.ContainsKey(userId))
            {
                borrowedBooks[userId] = new List<Book>();
            }

            // Add book to user's borrowed books
            borrowedBooks[userId].Add(selectedBook);
            books.Remove(selectedBook);

        }
    }

    private void HandleReturnBook(int userId, int bookId)
    {
        if (borrowedBooks.ContainsKey(userId))
        {
            var borrowedBook = borrowedBooks[userId].FirstOrDefault(b => b.Id == bookId);
            if (borrowedBook != null)
            {
                // Remove book from borrowed list
                books.Add(borrowedBook);
                borrowedBooks[userId].Remove(borrowedBook);

            }
        }
    }


    // Model class for form data
    public class BorrowModel
    {
        public int UserId { get; set; }

        public int BookId { get; set; }
    }
}

